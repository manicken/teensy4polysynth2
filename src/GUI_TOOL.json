[{"type":"settings","data":[{"arduino":{"useExportDialog":false,"IOcheckAtExport":true,"WriteJSONtoExportedFile":false,"WebServerPort":8080,"WebSocketServerPort":3000,"ProjectName":"Teensy4PolySynth","StandardIncludeHeader":"#include <Arduino.h>\n#include <Audio.h>\n#include <Wire.h>\n#include <SPI.h>\n#include <SD.h>\n#include <SerialFlash.h>\n"}},{"view":{"showWorkspaceToolbar":true,"showNodeToolTip":true,"guiEditMode":true,"lockWindowMouseScrollInRunMode":true,"space_width":5000,"space_height":5000,"scaleFactor":0.8,"showGridHminor":true,"showGridHmajor":true,"showGridVminor":true,"showGridVmajor":true,"gridHminorSize":20,"gridHmajorSize":200,"gridVminorSize":20,"gridVmajorSize":120,"gridMinorColor":"#DDDDDD","gridMajorColor":"#DDDDDD","snapToGrid":true,"snapToGridHsize":5,"snapToGridVsize":5,"lineCurveScale":0.75,"lineConnectionsScale":1.5}},{"palette":{"categoryHeaderTextSize":16,"categoryHeaderHeight":20,"categoryHeaderBackgroundColor":"#f3f3f3","onlyShowOne":true}}]},{"type":"tab","id":"4c6f22c7.190434","label":"Voice","inputs":1,"outputs":1,"export":true,"nodes":[]},{"id":"Voice_Slider2","type":"UI_Slider","name":"waveform1_freq","comment":"","w":31,"h":367,"textSize":14,"orientation":"v","label":"\"Main \" + d.val","minVal":0,"maxVal":100,"val":31,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 33, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1690,"y":385,"z":"4c6f22c7.190434","bgColor":"#7FF5F8","wires":[]},{"id":"Voice_Slider8","type":"UI_Slider","name":"Slider1_3","comment":"","w":30,"h":363,"textSize":14,"orientation":"v","label":"\"A \" + d.val","minVal":0,"maxVal":100,"val":94,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 29, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":915,"y":390,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[]},{"id":"Voice_Slider9","type":"UI_Slider","name":"Slider1_1_3","comment":"","w":30,"h":363,"textSize":14,"orientation":"v","label":"\"B \" + d.val","minVal":0,"maxVal":100,"val":96,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 30, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":965,"y":390,"z":"4c6f22c7.190434","bgColor":"#1AF800","wires":[]},{"id":"Voice_Slider10","type":"UI_Slider","name":"Slider1_1_1_2","comment":"","w":30,"h":363,"textSize":14,"orientation":"v","label":"\"C \" + d.val","minVal":0,"maxVal":100,"val":95,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":true,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 31, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1015,"y":390,"z":"4c6f22c7.190434","bgColor":"#009FF8","wires":[]},{"id":"Voice_Slider11","type":"UI_Slider","name":"Slider1_2_1","comment":"","w":30,"h":363,"textSize":14,"orientation":"v","label":"\"wt \" + d.val","minVal":0,"maxVal":100,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 32, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1065,"y":390,"z":"4c6f22c7.190434","bgColor":"#CCAFF8","wires":[]},{"id":"Voice_ListBox2","type":"UI_ListBox","name":"OSC A","comment":"","w":104,"h":301,"textSize":14,"items":"Sine\nSawtooth\nSquare\nTriangle\nPulse\nSaw. Rev.\nSample H\nVar. Tri.","sendCommand":"\"midiSend(0xB0, 20,\" + d.selectedIndex + \")\"","selectedIndex":4,"headerHeight":30,"itemBGcolor":"#FFFFFF","x":415,"y":395,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[]},{"id":"Voice_ListBox3","type":"UI_ListBox","name":"OSC B","comment":"","w":104,"h":301,"textSize":14,"items":"Sine\nSawtooth\nSquare\nTriangle\nPulse\nSaw. Rev.\nSample H\nVar. Tri.","sendCommand":"\"midiSend(0xB0, 21,\" + d.selectedIndex + \")\"","selectedIndex":1,"selectedIndexOffset":"","headerHeight":30,"itemBGcolor":"#FFFFFF","x":530,"y":395,"z":"4c6f22c7.190434","bgColor":"#3DF861","wires":[]},{"id":"Voice_ListBox4","type":"UI_ListBox","name":"OSC C","comment":"","w":104,"h":301,"textSize":14,"items":"Sine\nSawtooth\nSquare\nTriangle\nPulse\nSaw. Rev.\nSample H\nVar. Tri.","sendCommand":"\"midiSend(0xB0, 22,\" + d.selectedIndex + \")\"","selectedIndex":2,"selectedIndexOffset":"","headerHeight":30,"itemBGcolor":"#FFFFFF","x":645,"y":395,"z":"4c6f22c7.190434","bgColor":"#09B2F8","wires":[]},{"id":"Voice_ListBox5","type":"UI_ListBox","name":"Instrument","comment":"","w":174,"h":192,"textSize":14,"items":"WaveForm Only\nVelocity Grand Piano\nStereo Grand1\nObie Synth\nMmmmHumSynth","sendCommand":"\"midiSend(0xB0, 0 ,\" + d.selectedIndex +\")\"","selectedIndex":0,"selectedIndexOffset":"","headerHeight":30,"itemBGcolor":"#FFFFFF","x":795,"y":450,"z":"4c6f22c7.190434","bgColor":"#CCAFF8","wires":[]},{"id":"Voice_scriptBtn4","type":"UI_ScriptButton","name":"play twinkle twinkle little star","comment":"var count = 0;\nvar toSend = [\"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\",\n              \"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 69, 63)\",\n              \"midisend(0x80, 69, 63)\",\n              \"midisend(0x90, 69, 63)\",\n              \"midisend(0x80, 69, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 0, 0)\",\n              \"midisend(0x80, 0, 0)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\",\n              \"midisend(0x90, 0, 0)\",\n              \"midisend(0x80, 0, 0)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 0, 0)\",\n              \"midisend(0x80, 0, 0)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 0, 0)\",\n              \"midisend(0x80, 0, 0)\",\n              \"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\",\n              \"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 69, 63)\",\n              \"midisend(0x80, 69, 63)\",\n              \"midisend(0x90, 69, 63)\",\n              \"midisend(0x80, 69, 63)\",\n              \"midisend(0x90, 67, 63)\",\n              \"midisend(0x80, 67, 63)\",\n              \"midisend(0x90, 0, 0)\",\n              \"midisend(0x80, 0, 0)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 65, 63)\",\n              \"midisend(0x80, 65, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 64, 63)\",\n              \"midisend(0x80, 64, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 62, 63)\",\n              \"midisend(0x80, 62, 63)\",\n              \"midisend(0x90, 60, 63)\",\n              \"midisend(0x80, 60, 63)\"\n\n];\nconsole.log(d.name);\nvar interVal = setInterval(function(){\n\n RED.arduino.SendToWebSocket(toSend[count]);\n  \n  count++;\n if (count === toSend.length) clearInterval(interVal);\n \n \n}, 200);","w":232,"h":46,"textSize":14,"x":495,"y":600,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_scriptBtn2","type":"UI_ScriptButton","name":"auto place full size piano - script","comment":"var niw = 150; // new item width\nvar nih = 150; // new item height\nvar nis = 0; // item spacing\nvar count = 11;\nvar newType = \"UI_Piano\";\n\n// note that all positions x and y \n// are based from the middle of the rects\n\n//RED.view.PianoNodeListTemp is used\n// to store the prev. added items (sliders)\n// so they can be removed before the script is run\n// again (to avoid \"duplicates\")\n// this list is NOT saved between instances of this \"program\"\n\nif (RED.view.PianoNodeListTemp == undefined)\n    RED.view.PianoNodeListTemp = [];\nelse // prev items exists\n{\n    // this clears previously added items\n    for (var i = 0; i < RED.view.PianoNodeListTemp.length; i++)\n    {\n        removeNode(RED.view.PianoNodeListTemp[i]);\n    }\n    RED.view.PianoNodeListTemp = [];\n}\nredraw(true);\nconsole.warn(\"script name:\" + d.name +\":\"+ d.x + \":\" + d.y + \":\" + d.w + \":\" +d.h);\nfor (var i = 0; i < count; i++)\n{\n    var newPiano = AddNewNode(0, 0, newType);\n    newPiano.name = \"octave\" + i;\n    newPiano.midiCh = 0;\n    newPiano.octave = i;\n    newPiano.sendCommand = '\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"'\n    newPiano.h = nih;\n    newPiano.w = niw;\n    newPiano.x = i*(niw+nis) + (d.x-d.w/2 + niw/2);\n    newPiano.y = (d.y+d.h/2+nih/2);\n    newPiano.blackKeysWidthDiff = 10;\n    newPiano.dirty = true;\n    \n    RED.view.PianoNodeListTemp.push(newPiano);\n    \n}\nredraw(true);","w":299,"h":30,"textSize":14,"x":190,"y":625,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_scriptBtn5","type":"UI_ScriptButton","name":"assign qwertyui keyboard buttons to midi send ","comment":"var qs = false;\r\nvar ws = false;\r\nvar es = false;\r\nvar rs = false;\r\nvar ts = false;\r\nvar ys = false;\r\nvar us = false;\r\nvar is = false;\r\n\r\nRED.keyboard.add(/* q */ 81, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,48 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,48 ,127)\");});\r\nRED.keyboard.add(/* w */ 87, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,50 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,50 ,127)\");});\r\nRED.keyboard.add(/* e */ 69, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,52 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,52 ,127)\");});\r\nRED.keyboard.add(/* r */ 82, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,53 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,53 ,127)\");});\r\nRED.keyboard.add(/* t */ 84, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,55 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,55 ,127)\");});\r\nRED.keyboard.add(/* y */ 89, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,57 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,57 ,127)\");});\r\nRED.keyboard.add(/* u */ 85, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,59 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,59 ,127)\");});\r\nRED.keyboard.add(/* i */ 73, function() { RED.arduino.SendToWebSocket(\"midiSend(0x90,60 ,127)\");d3.event.preventDefault();}, function() { RED.arduino.SendToWebSocket(\"midiSend(0x80,60 ,127)\");});","w":306,"h":30,"textSize":14,"x":200,"y":830,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_scriptBtn1","type":"UI_ScriptButton","name":"auto place sliders - script","comment":"var nsw = 40; // new slider width\nvar nsh = 300; // new slider height\nvar ssp = 30; // slider spacing\nvar count = 6;\nvar nsmav = 100; // new slider max Value\nvar nsmiv = 0; // new slider min value\nvar tlh = 20; // top label height\nvar tlw = 60; // top label width \n\nvar yof = 10; // y offset\n\nvar sliderValues = [ 0,0,0,0,100,0];\nvar topLabelTitles = [\"Delay\", \"Attack\", \"Hold\", \"Decay\", \"Sustain\", \"Release\"];\nvar labelFormats = ['d.val*10 + \"ms\"','d.val*10 + \"ms\"','d.val*10 + \"ms\"','d.val*10 + \"ms\"','d.val+\"%\"','d.val*10 + \"ms\"'];\n\nvar colorMap = generateColorMap(); // provided by RED.view\n\nvar colorMapDeltaIndex = parseInt(colorMap.length/count);\nvar deltaValue = nsmav/count;\n//console.warn(colorMap);\n\n// note that all positions x and y \n// are based from the middle of the rects\n\n//RED.view.SliderNodeListTemp is used\n// to store the prev. added items (sliders)\n// so they can be removed before the script is run\n// again (to avoid \"duplicates\")\n// this list is NOT saved between instances of this \"program\"\n\nif (RED.view.SliderNodeListTemp == undefined)\n    RED.view.SliderNodeListTemp = [];\nelse // prev items exists\n{\n    // this clears previously added items\n    for (var i = 0; i < RED.view.SliderNodeListTemp.length; i++)\n    {\n        removeNode(RED.view.SliderNodeListTemp[i]);\n    }\n    RED.view.SliderNodeListTemp = [];\n}\nredraw(true);\n\nfor (var i = 0; i < count; i++)\n{\n    var newSlider = AddNewNode(i*(nsw+ssp) + (d.x-d.w/2 + nsw/2),(d.y+d.h/2+nsh/2)+tlh + yof, \"UI_Slider\");\n    newSlider.name = topLabelTitles[i];\n    newSlider.label = labelFormats[i];\n    newSlider.orientation = \"v\";\n    newSlider.sendFormat = '\"midisend(0xB0,' +(100+i)+ ', \" + d.val + \");\"'\n    newSlider.h = nsh;\n    newSlider.w = nsw;\n    newSlider.maxValue = nsmav;\n    newSlider.minValue = nsmiv;\n    newSlider.val = sliderValues[i];\n    newSlider.dirty = true;\n    newSlider.bgColor = colorMap[colorMapDeltaIndex*i];\n    \n    RED.view.SliderNodeListTemp.push(newSlider);\n    \n    var newLabel = AddNewNode(i*(nsw+ssp) + (d.x-d.w/2 + nsw/2),(d.y+d.h/2+tlh/2) + yof, \"UI_Label\");\n    newLabel.name = topLabelTitles[i];\n    newLabel.h = tlh;\n    newLabel.w = tlw;\n    newLabel.dirty = true;\n    //newLabel.bgColor = colorMap[colorMapDeltaIndex*i];\n    \n    RED.view.SliderNodeListTemp.push(newLabel);\n    \n}\nredraw(true);\n\n","w":191,"h":30,"textSize":14,"x":1285,"y":220,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_Slider1","type":"UI_Slider","name":"Delay","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val*10 + \"ms\"","minVal":0,"maxVal":100,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,100, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1205,"y":415,"z":"4c6f22c7.190434","bgColor":"#ff0000","wires":[]},{"id":"Voice_Label1","type":"UI_Label","name":"Delay","comment":"","w":60,"h":20,"textSize":14,"x":1205,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider3","type":"UI_Slider","name":"Attack","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val*10 + \"ms\"","minVal":0,"maxVal":100,"val":1,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,101, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1275,"y":415,"z":"4c6f22c7.190434","bgColor":"#ffff00","wires":[]},{"id":"Voice_Label2","type":"UI_Label","name":"Attack","comment":"","w":60,"h":20,"textSize":14,"x":1275,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider4","type":"UI_Slider","name":"Hold","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val*10 + \"ms\"","minVal":0,"maxVal":100,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,102, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1345,"y":415,"z":"4c6f22c7.190434","bgColor":"#00ff00","wires":[]},{"id":"Voice_Label3","type":"UI_Label","name":"Hold","comment":"","w":60,"h":20,"textSize":14,"x":1345,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider5","type":"UI_Slider","name":"Decay","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val*10 + \"ms\"","minVal":0,"maxVal":100,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,103, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1415,"y":415,"z":"4c6f22c7.190434","bgColor":"#00ffff","wires":[]},{"id":"Voice_Label4","type":"UI_Label","name":"Decay","comment":"","w":60,"h":20,"textSize":14,"x":1415,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider6","type":"UI_Slider","name":"Sustain","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val+\"%\"","minVal":0,"maxVal":100,"val":70,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,104, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1485,"y":415,"z":"4c6f22c7.190434","bgColor":"#0000ff","wires":[]},{"id":"Voice_Label5","type":"UI_Label","name":"Sustain","comment":"","w":60,"h":20,"textSize":14,"x":1485,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider7","type":"UI_Slider","name":"Release","comment":"","w":40,"h":300,"textSize":14,"orientation":"v","label":"d.val*10 + \"ms\"","minVal":0,"maxVal":100,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"r","sendFormat":"\"midisend(0xB0,105, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":1555,"y":415,"z":"4c6f22c7.190434","bgColor":"#ff00ff","wires":[]},{"id":"Voice_Label6","type":"UI_Label","name":"Release","comment":"","w":60,"h":20,"textSize":14,"x":1555,"y":255,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider12","type":"UI_Slider","name":"Slider1_3_1","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"A \" + d.val","minVal":0,"maxVal":100,"val":30,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 23, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":25,"y":385,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[]},{"id":"Voice_Slider13","type":"UI_Slider","name":"Slider1_1_3_1","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"B \" + d.val","minVal":0,"maxVal":100,"val":2,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 24, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":60,"y":385,"z":"4c6f22c7.190434","bgColor":"#1AF800","wires":[]},{"id":"Voice_Slider14","type":"UI_Slider","name":"Slider1_1_1_2_1","comment":"","w":30,"h":286,"textSize":14,"orientation":"v","label":"\"C \" + d.val","minVal":0,"maxVal":100,"val":14,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":true,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 25, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":95,"y":385,"z":"4c6f22c7.190434","bgColor":"#009FF8","wires":[]},{"id":"Voice_Label7","type":"UI_Label","name":"Pulse width","comment":"","w":100,"h":30,"textSize":14,"x":60,"y":220,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider15","type":"UI_Slider","name":"Slider1_3_1_1","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"A \" + d.val","minVal":48,"maxVal":80,"val":65,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 108, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":145,"y":385,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[]},{"id":"Voice_Slider16","type":"UI_Slider","name":"Slider1_1_3_1_1","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"B \" + d.val","minVal":48,"maxVal":80,"val":65,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 109, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":180,"y":385,"z":"4c6f22c7.190434","bgColor":"#1AF800","wires":[]},{"id":"Voice_Slider17","type":"UI_Slider","name":"Slider1_1_1_2_1_1","comment":"","w":30,"h":286,"textSize":14,"orientation":"v","label":"\"C \" + d.val","minVal":48,"maxVal":80,"val":62,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":true,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 110, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":215,"y":385,"z":"4c6f22c7.190434","bgColor":"#009FF8","wires":[]},{"id":"Voice_Label8","type":"UI_Label","name":"FreqMult","comment":"","w":100,"h":30,"textSize":14,"x":180,"y":220,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Slider18","type":"UI_Slider","name":"Slider1_3_1_2","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"A \" + d.val","minVal":0,"maxVal":120,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 26, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":265,"y":385,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[]},{"id":"Voice_Slider19","type":"UI_Slider","name":"Slider1_1_3_1_2","comment":"","w":30,"h":284,"textSize":14,"orientation":"v","label":"\"B \" + d.val","minVal":0,"maxVal":120,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":false,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 27, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":300,"y":385,"z":"4c6f22c7.190434","bgColor":"#1AF800","wires":[]},{"id":"Voice_Slider20","type":"UI_Slider","name":"Slider1_1_1_2_1_2","comment":"","w":30,"h":286,"textSize":14,"orientation":"v","label":"\"C \" + d.val","minVal":0,"maxVal":120,"val":0,"outputFloat":false,"minValF":-1,"maxValF":1,"floatVal":0,"decimalCount":-1,"steps":201,"sendSpace":true,"repeat":true,"repeatPeriod":0,"sendMode":"m","sendFormat":"\"midisend(0xB0, 28, \" + d.val + \");\"","autoReturn":false,"returnValue":"mid","x":335,"y":385,"z":"4c6f22c7.190434","bgColor":"#009FF8","wires":[]},{"id":"Voice_Label9","type":"UI_Label","name":"Phase","comment":"","w":100,"h":30,"textSize":14,"x":300,"y":220,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano1","type":"UI_Piano","name":"octave0","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":0,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":115.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano2","type":"UI_Piano","name":"octave1","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":1,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":265.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano3","type":"UI_Piano","name":"octave2","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":2,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":415.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano4","type":"UI_Piano","name":"octave3","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":3,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":565.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano5","type":"UI_Piano","name":"octave4","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":4,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":715.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano6","type":"UI_Piano","name":"octave5","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":5,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":865.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano7","type":"UI_Piano","name":"octave6","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":6,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":1015.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano8","type":"UI_Piano","name":"octave7","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":7,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":1165.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano9","type":"UI_Piano","name":"octave8","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":8,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":1315.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano10","type":"UI_Piano","name":"octave9","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":9,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":1465.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_Piano11","type":"UI_Piano","name":"octave10","comment":"","w":150,"h":150,"textSize":14,"midiCh":0,"octave":10,"sendCommand":"\"midiSend(\"+(d.keyDown+d.midiCh)+\",\"+(d.octave*12+d.keyIndex) +\",127)\"","headerHeight":30,"whiteKeysColor":"#FFFFFF","blackKeysColor":"#A0A0A0","blackKeysWidthDiff":10,"x":1615.5,"y":715,"z":"4c6f22c7.190434","bgColor":"#F6F8BC","wires":[]},{"id":"Voice_vars1","type":"Variables","name":"noteFreqs","comment":"const float noteFreqs[128] = {8.176, 8.662, 9.177, 9.723, 10.301, 10.913, 11.562, 12.25, 12.978, 13.75, 14.568, 15.434, 16.352, 17.324, 18.354, 19.445, 20.602, 21.827, 23.125, 24.5, 25.957, 27.5, 29.135, 30.868, 32.703, 34.648, 36.708, 38.891, 41.203, 43.654, 46.249, 48.999, 51.913, 55, 58.27, 61.735, 65.406, 69.296, 73.416, 77.782, 82.407, 87.307, 92.499, 97.999, 103.826, 110, 116.541, 123.471, 130.813, 138.591, 146.832, 155.563, 164.814, 174.614, 184.997, 195.998, 207.652, 220, 233.082, 246.942, 261.626, 277.183, 293.665, 311.127, 329.628, 349.228, 369.994, 391.995, 415.305, 440, 466.164, 493.883, 523.251, 554.365, 587.33, 622.254, 659.255, 698.456, 739.989, 783.991, 830.609, 880, 932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508, 1318.51, 1396.913, 1479.978, 1567.982, 1661.219, 1760, 1864.655, 1975.533, 2093.005, 2217.461, 2349.318, 2489.016, 2637.02, 2793.826, 2959.955, 3135.963, 3322.438, 3520, 3729.31, 3951.066, 4186.009, 4434.922, 4698.636, 4978.032, 5274.041, 5587.652, 5919.911, 6271.927, 6644.875, 7040, 7458.62, 7902.133, 8372.018, 8869.844, 9397.273, 9956.063, 10548.08, 11175.3, 11839.82, 12543.85};\n","x":75,"y":25,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_vars2","type":"Variables","name":"vars1","comment":"byte note = 0;\nbyte isNoteOn = 0;\nbyte isSustain = 0;\nbyte oscApitchMult = 64; // set at middle\nbyte oscBpitchMult = 64; // set at middle\nbyte oscCpitchMult = 64; // set at middle\nfloat newAmp = 0.0;","x":65,"y":60,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_code1","type":"Function","name":"begin function","comment":"void begin()\n{\n\n}\n\n","x":85,"y":95,"z":"4c6f22c7.190434","bgColor":"#6FE2E9","wires":[]},{"id":"Voice_code2","type":"Function","name":"note on/off","comment":"/*\n * this takes care of all the tasks that\n * needs to be taken care of when doing\n * a note on/off\n */\n \nvoid noteOn(byte Note, byte velocity)\n{\n    float newAmp = 0.0f;\n    if (Note >= sizeof(noteFreqs)) return;\n    \n    note = Note;\n    isNoteOn = 1;\n    \n    newAmp = (float)velocity*(1.0f / 127.0f);\n      \n      oscA.frequency(GetBendedFreq(oscApitchMult));\n      oscB.frequency(GetBendedFreq(oscBpitchMult));\n      oscC.frequency(GetBendedFreq(oscCpitchMult));\n\n      oscA.amplitude(newAmp);\n      oscB.amplitude(newAmp);\n      oscC.amplitude(newAmp);\n\n      waveTable.playNote(note, velocity);\n      \n      env.noteOn();\n}\n\nvoid noteOff()\n{\n    isNoteOn = 0;\n    if (!isSustain)\n    {\n        env.noteOff();\n        waveTable.stop();\n    }\n}\n\nbool isNotPlaying()\n{\n    if (!env.isActive())\n        return true;\n    else if(!waveTable.isPlaying())\n        return true;\n    else\n        return false;\n}\n\nfloat GetBendedFreq(byte pitchMult)\n{\n    if (pitchMult < 64)\n        return noteFreqs[note - 12*(64-pitchMult)];\n    else if (pitchMult > 64)\n        return noteFreqs[note + 12*(pitchMult-64)];\n    else\n        return noteFreqs[note];\n}","x":75,"y":130,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_In1","type":"TabInput","name":"modIn1","comment":"","x":290,"y":45,"z":"4c6f22c7.190434","bgColor":"#CCE6FF","wires":[[]]},{"id":"Voice_waveform1","type":"AudioSynthWaveform","name":"oscA","comment":"","x":690,"y":105,"z":"4c6f22c7.190434","bgColor":"#F87A00","wires":[["Voice_mixer1:0"]]},{"id":"Voice_waveform2","type":"AudioSynthWaveform","name":"oscB","comment":"","x":690,"y":140,"z":"4c6f22c7.190434","bgColor":"#3DF861","wires":[["Voice_mixer1:1"]]},{"id":"Voice_waveform3","type":"AudioSynthWaveform","name":"oscC","comment":"","x":690,"y":175,"z":"4c6f22c7.190434","bgColor":"#09B2F8","wires":[["Voice_mixer1:2"]]},{"id":"Voice_wavetable1","type":"AudioSynthWavetable","name":"waveTable","comment":"","x":695,"y":220,"z":"4c6f22c7.190434","bgColor":"#CCAFF8","wires":[["Voice_mixer1:3"]]},{"id":"Voice_ClassComment1","type":"ClassComment","name":"This is a single <b>voice</b> with three \"generators\" + 1xWaveTable and one envelope","x":785,"y":30,"z":"4c6f22c7.190434","bgColor":"#CCFFCC","wires":[]},{"id":"Voice_includeDef1","type":"IncludeDef","name":"\"theMixer.h\"","comment":"","x":980,"y":95,"z":"4c6f22c7.190434","bgColor":"#DDFFBB","wires":[]},{"id":"Voice_mixer1","type":"AudioMixer","name":"mix","inputs":"4","comment":"","x":985,"y":165,"z":"4c6f22c7.190434","bgColor":"#E6E0F8","wires":[["Voice_envelope1:0"]]},{"id":"Voice_envelope1","type":"AudioEffectEnvelope","name":"env","comment":"","x":1375,"y":170,"z":"4c6f22c7.190434","bgColor":"#E6E0F8","wires":[["Voice_Out1:0"]]},{"id":"Voice_Out1","type":"TabOutput","name":"Out1","comment":"","x":1690,"y":175,"z":"4c6f22c7.190434","bgColor":"#cce6ff","wires":[]},{"type":"tab","id":"Main","label":"Synth","inputs":0,"outputs":0,"export":true,"nodes":[]},{"id":"SynthMain_usb1","type":"AudioInputUSB","name":"usb1","comment":"","x":85,"y":90,"z":"Main","bgColor":"#E6E0F8","wires":[[],[]]},{"id":"Synth_includeDef2","type":"IncludeDef","name":"<MIDI.h>","comment":"","x":180,"y":235,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_includeDef1","type":"IncludeDef","name":"<EEPROM.h>","comment":"","x":180,"y":265,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_includeDef1","type":"IncludeDef","name":"\"instruments/VelocityGrandPiano_samples.h\"","comment":"","x":180,"y":295,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_includeDef2","type":"IncludeDef","name":"\"instruments/MmmmHumSynth_samples.h\"","comment":"","x":180,"y":325,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_includeDef3","type":"IncludeDef","name":"\"instruments/ObieSynth1_samples.h\"","comment":"","x":180,"y":355,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_includeDef4","type":"IncludeDef","name":"\"instruments/StereoGrand1_samples.h\"","comment":"","x":180,"y":385,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_ClassComment1","type":"ClassComment","name":"This is the root class of any sound objects","x":250,"y":40,"z":"Main","bgColor":"#CCFFCC","wires":[]},{"id":"Main_constValue1","type":"ConstValue","name":"VOICE_COUNT","value":"80","valueType":"int","x":345,"y":75,"z":"Main","bgColor":"#EB9834","wires":[]},{"id":"Main_Voice1","type":"Voice","name":"voices[VOICE_COUNT]","x":350,"y":145,"z":"Main","bgColor":"#CCFFCC","wires":[["Main_mixer1:0"]]},{"id":"Main_codeFile1","type":"CodeFile","name":"theMixer.h","comment":"/* Audio Library for Teensy 3.X\r\n * Copyright (c) 2014, Paul Stoffregen, paul@pjrc.com\r\n *\r\n * Development of this audio library was funded by PJRC.COM, LLC by sales of\r\n * Teensy and Audio Adaptor boards.  Please support PJRC's efforts to develop\r\n * open source software by purchasing Teensy or other PJRC products.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice, development funding notice, and this permission\r\n * notice shall be included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\n\r\n#ifndef themixer_h_\r\n#define themixer_h_\r\n\r\n#include <Arduino.h>\r\n#include <AudioStream.h>\r\n\r\n//#define AudioMixer4 AudioMixer<4>\r\n\r\n#if defined(__ARM_ARCH_7EM__)\r\n\r\n#define MULTI_UNITYGAIN 65536\r\n#define MULTI_UNITYGAIN_F 65536.0f\r\n#define MAX_GAIN 32767.0f\r\n#define MIN_GAIN -32767.0f\r\n#define MULT_DATA_TYPE int32_t\r\n\r\n#elif defined(KINETISL)\r\n\r\n#define MULTI_UNITYGAIN 256\r\n#define MULTI_UNITYGAIN_F 256.0f\r\n#define MAX_GAIN 127.0f\r\n#define MIN_GAIN -127.0f\r\n#define MULT_DATA_TYPE int16_t\r\n\r\n#endif\r\n\r\ntemplate <int NN> class AudioMixer : public AudioStream\r\n{\r\npublic:\r\n  AudioMixer(void) : AudioStream(NN, inputQueueArray) {\r\n    for (int i=0; i<NN; i++) multiplier[i] = MULTI_UNITYGAIN;\r\n  } \r\n  virtual void update();\r\n  \r\n  /**\r\n   * this sets the individual gains\r\n   * @param channel\r\n   * @param gain\r\n   */\r\n  void gain(unsigned int channel, float gain);\r\n  /**\r\n   * set all channels to specified gain\r\n   * @param gain\r\n   */\r\n  void gain(float gain);\r\n\r\nprivate:\r\n  MULT_DATA_TYPE multiplier[NN];\r\n  audio_block_t *inputQueueArray[NN];\r\n};\r\n\r\n// the following Forward declarations \r\n// must be defined when we use template \r\n// the compiler throws some warnings that should be errors otherwise\r\n\r\nstatic int32_t signed_multiply_32x16b(int32_t a, uint32_t b); \r\nstatic int32_t signed_multiply_32x16t(int32_t a, uint32_t b);\r\nstatic int32_t signed_saturate_rshift(int32_t val, int bits, int rshift);\r\nstatic uint32_t pack_16b_16b(int32_t a, int32_t b);\r\nstatic uint32_t signed_add_16_and_16(uint32_t a, uint32_t b);\r\n\r\n// because of the template use applyGain and applyGainThenAdd functions\r\n// must be in this file and NOT in cpp file\r\n#if defined(__ARM_ARCH_7EM__)\r\n\r\n  static void applyGain(int16_t *data, int32_t mult)\r\n  {\r\n    uint32_t *p = (uint32_t *)data;\r\n    const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);\r\n\r\n    do {\r\n      uint32_t tmp32 = *p; // read 2 samples from *data\r\n      int32_t val1 = signed_multiply_32x16b(mult, tmp32);\r\n      int32_t val2 = signed_multiply_32x16t(mult, tmp32);\r\n      val1 = signed_saturate_rshift(val1, 16, 0);\r\n      val2 = signed_saturate_rshift(val2, 16, 0);\r\n      *p++ = pack_16b_16b(val2, val1);\r\n    } while (p < end);\r\n  }\r\n\r\n  static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)\r\n  {\r\n    uint32_t *dst = (uint32_t *)data;\r\n    const uint32_t *src = (uint32_t *)in;\r\n    const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);\r\n\r\n    if (mult == MULTI_UNITYGAIN) {\r\n      do {\r\n        uint32_t tmp32 = *dst;\r\n        *dst++ =  signed_add_16_and_16(tmp32, *src++);\r\n        tmp32 = *dst;\r\n        *dst++ =  signed_add_16_and_16(tmp32, *src++);\r\n      } while (dst < end);\r\n    } else {\r\n      do {\r\n        uint32_t tmp32 = *src++; // read 2 samples from *data\r\n        int32_t val1 =  signed_multiply_32x16b(mult, tmp32);\r\n        int32_t val2 =  signed_multiply_32x16t(mult, tmp32);\r\n        val1 =  signed_saturate_rshift(val1, 16, 0);\r\n        val2 =  signed_saturate_rshift(val2, 16, 0);\r\n        tmp32 =  pack_16b_16b(val2, val1);\r\n        uint32_t tmp32b = *dst;\r\n        *dst++ =  signed_add_16_and_16(tmp32, tmp32b);\r\n      } while (dst < end);\r\n    }\r\n  }\r\n\r\n#elif defined(KINETISL)\r\n\r\n  static void applyGain(int16_t *data, int32_t mult)\r\n  {\r\n    const int16_t *end = data + AUDIO_BLOCK_SAMPLES;\r\n\r\n    do {\r\n      int32_t val = *data * mult;\r\n      *data++ = signed_saturate_rshift(val, 16, 0);\r\n    } while (data < end);\r\n  }\r\n\r\n  static void applyGainThenAdd(int16_t *dst, const int16_t *src, int32_t mult)\r\n  {\r\n    const int16_t *end = dst + AUDIO_BLOCK_SAMPLES;\r\n\r\n    if (mult == MULTI_UNITYGAIN) {\r\n      do {\r\n        int32_t val = *dst + *src++;\r\n        *dst++ = signed_saturate_rshift(val, 16, 0);\r\n      } while (dst < end);\r\n    } else {\r\n      do {\r\n        int32_t val = *dst + ((*src++ * mult) >> 8); // overflow possible??\r\n        *dst++ = signed_saturate_rshift(val, 16, 0);\r\n      } while (dst < end);\r\n    }\r\n  }\r\n#endif\r\n\r\ntemplate <int NN> void AudioMixer<NN>::gain(unsigned int channel, float gain) {\r\n  if (channel >= NN) return;\r\n  if (gain > MAX_GAIN) gain = MAX_GAIN;\r\n  else if (gain < MIN_GAIN) gain = MIN_GAIN;\r\n  multiplier[channel] = gain * MULTI_UNITYGAIN_F; // TODO: proper roundoff?\r\n}\r\n\r\ntemplate <int NN> void AudioMixer<NN>::gain(float gain) {\r\n  for (int i = 0; i < NN; i++) {\r\n    if (gain > MAX_GAIN) gain = MAX_GAIN;\r\n    else if (gain < MIN_GAIN) gain = MIN_GAIN;\r\n    multiplier[i] = gain * MULTI_UNITYGAIN_F; // TODO: proper roundoff?\r\n  } \r\n}\r\n\r\ntemplate <int NN> void AudioMixer<NN>::update() {\r\n  audio_block_t *in, *out=NULL;\r\n  unsigned int channel;\r\n  for (channel=0; channel < NN; channel++) {\r\n    if (!out) {\r\n      out = receiveWritable(channel);\r\n      if (out) {\r\n        int32_t mult = multiplier[channel];\r\n        if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);\r\n      }\r\n    } else {\r\n      in = receiveReadOnly(channel);\r\n      if (in) {\r\n        applyGainThenAdd(out->data, in->data, multiplier[channel]);\r\n        release(in);\r\n      }\r\n    }\r\n  }\r\n  if (out) {\r\n    transmit(out);\r\n    release(out);\r\n  }\r\n}\r\n// this class and function forces include \r\n// of functions applyGainThenAdd and applyGain used by the template\r\nclass DummyClass\r\n{\r\n  public:\r\n    virtual void dummyFunction();\r\n};\r\nvoid DummyClass::dummyFunction() {\r\n  applyGainThenAdd(0, 0, 0);\r\n  applyGain(0,0);\r\n    \r\n}\r\n\r\n#endif","x":535,"y":100,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Main_mixer1","type":"AudioMixer","name":"mixVoices","inputs":"1","comment":"","x":525,"y":145,"z":"Main","bgColor":"#E6E0F8","wires":[["SynthMain_pt8211_2_1:0","SynthMain_pt8211_2_1:1","Synth_usb1:0","Synth_usb1:1"]]},{"id":"SynthMain_vars1","type":"Variables","name":"vars2","comment":"#define NOTE_PRESSED_STATE_LED  6\n#define NOTE_OVERFLOWN_LED      5\n#define InstrumentCount 5\n\nconst float DIV127 = (1.0 / 127.0);\nconst float DIV100 = 0.01;\nconst float DIV64 = (1.0/64.0);\nconst float DIV360BY127 = (360.0/127.0);\nconst float DIV360BY120 = (3.0);\n\nbyte oscAwaveform = WAVEFORM_SINE;\nbyte oscBwaveform = WAVEFORM_SINE;\nbyte oscCwaveform = WAVEFORM_SINE;\n\nbyte mixVoices_gains = 100;\n\nbyte oscAamp = 100;\nbyte oscBamp = 100;\nbyte oscCamp = 100;\nbyte oscDamp = 100;\n\nbyte oscApulsewidth = 0;\nbyte oscBpulsewidth = 0;\nbyte oscCpulsewidth = 0;\n\nbyte oscAphase = 0;\nbyte oscBphase = 0;\nbyte oscCphase = 0;\n\nbyte envDelay = 0;\nbyte envAttack = 0;\nbyte envHold = 0;\nbyte envDecay = 0;\nbyte envSustain = 100;\nbyte envRelease = 0;\n\nbyte currentWTinstrument = 0;\n\n// global scope\nbyte oscApitchMult = 64; // set at middle\nbyte oscBpitchMult = 64; // set at middle\nbyte oscCpitchMult = 64; // set at middle","x":525,"y":240,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_code3","type":"Function","name":"begin function","comment":"void begin()\n{\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].begin();\n        mixVoices.gain(i, 1.0f/VOICE_COUNT);\n    }\n    pinMode(NOTE_OVERFLOWN_LED, OUTPUT);\n    digitalWrite(NOTE_OVERFLOWN_LED, LOW);\n\n    pinMode(NOTE_PRESSED_STATE_LED, OUTPUT);\n    digitalWrite(NOTE_PRESSED_STATE_LED, LOW);\n\n    EEPROM_ReadSettings();\n\n    set_InstrumentByIndex(1); // VelocityGrandPiano\n    //mixFinal.gain(1.0f);\n}\n","x":550,"y":275,"z":"Main","bgColor":"#6FE2E9","wires":[]},{"id":"SynthMain_code1","type":"Function","name":"noteOnOff","comment":"void noteOn(byte note, byte velocity)\n{\n    digitalWrite(NOTE_PRESSED_STATE_LED, HIGH); //any note \"pressed\"\n    // fist checks if this note is allready playing\n    // it that is the case then it \"reuses\" this \"slot\"\n    // this makes sure that not all \"slots\" is filled\n    // with the same playing note\n    // if the MIDI keyboard is for some reason\n    // not sending a noteoff (my keyboard is sometimes glitching)\n    // and when sending MIDI from my computer for fast playing songs\n    for (int i = 0; i < VOICE_COUNT; i++) \n    {\n        // first check if the note was played recently\n        if (voices[i].note == note) \n        {\n            voices[i].noteOn(note, velocity);\n            digitalWrite(NOTE_OVERFLOWN_LED, LOW);\n            return; \n        }\n    }\n    // then if the note has not allready been played\n    // // second see if there is any free \"spot\"\n    for (int i = 0; i < VOICE_COUNT; i++) \n    {\n        if (voices[i].isNotPlaying())\n        {\n            voices[i].noteOn(note, velocity);\n            //digitalWrite(NOTE_OVERFLOWN_LED, LOW); // clear overflown notification\n            return;\n        }\n    }\n    digitalWrite(NOTE_OVERFLOWN_LED, HIGH); // this is a notification that there was no free spots\n}\n\nvoid noteOff(byte note)\n{\n    digitalWrite(NOTE_PRESSED_STATE_LED, LOW); //any note \"released\"\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        if (voices[i].note == note)\n        {\n            voices[i].noteOff();\n            return;\n        }\n    }\n}\n","x":535,"y":310,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code9","type":"Function","name":"sustain - functions","comment":"\nvoid activateSustain()\n{\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].isSustain = 1;\n    }\n}\n\nvoid deactivateSustain()\n{\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].isSustain = 0;\n        if (!voices[i].isNoteOn)\n            voices[i].noteOff();\n    }\n}","x":560,"y":345,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code2","type":"Function","name":"set_Instrument - functions","comment":"\nvoid set_InstrumentByIndex(byte index)\n{\n    currentWTinstrument = index;\n    switch(index)\n    {\n        case 0:\n            SetWaveForm_As_Primary();\n            break;\n        case 1:\n            SetWaveTable_As_Primary();\n            set_Instrument(VelocityGrandPiano);\n            //synth_set_Instrument(_16layerspiano);\n            break;\n        case 2:\n            SetWaveTable_As_Primary();\n            set_Instrument(StereoGrand1);\n            break;\n        case 3:\n            SetWaveTable_As_Primary();\n            set_Instrument(ObieSynth1);\n            break;\n        case 4:\n            SetWaveTable_As_Primary();\n            set_Instrument(MmmmHumSynth);\n            break;\n        default:\n            break;\n    }\n}\n\nvoid set_Instrument(const AudioSynthWavetable::instrument_data &instrument)\n{\n    for (int i = 0; i< VOICE_COUNT; i++)\n    {\n        voices[i].waveTable.setInstrument(instrument);\n        voices[i].waveTable.amplitude(1.0);\n    }\n}\n\nvoid set_mixVoices_gains(byte value)\n{\n    if (value > 100) value = 100;\n    mixVoices_gains = value;\n    for (int i = 0; i < VOICE_COUNT; i++)\n        mixVoices.gain(i, value*DIV100);\n}\n\nvoid SetWaveTable_As_Primary()\n{\n    set_OSC_A_amplitude(0);\n    set_OSC_B_amplitude(0);\n    set_OSC_C_amplitude(0);\n    set_OSC_D_amplitude(100);\n    set_mixVoices_gains(100);\n}\n\nvoid SetWaveForm_As_Primary()\n{\n    set_OSC_A_amplitude(100);\n    set_OSC_B_amplitude(100);\n    set_OSC_C_amplitude(100);\n    set_OSC_D_amplitude(0);\n    set_mixVoices_gains(3);\n}","x":565,"y":405,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code3","type":"Function","name":"set_OSC_x_waveform - functions","comment":"\nvoid set_OSC_A_waveform(byte wf)\n{\n    if (wf > 8) wf = 8;\n    oscAwaveform = wf;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscA.begin(wf);\n    }\n}\n\nvoid set_OSC_B_waveform(byte wf)\n{\n    if (wf > 8) wf = 8;\n    oscBwaveform = wf;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscB.begin(wf);\n    }\n}\n\nvoid set_OSC_C_waveform(byte wf)\n{\n    if (wf > 8) wf = 8;\n    oscCwaveform = wf;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscC.begin(wf);\n\n        //voices[i].oscD.begin(wf); // experimental\n    }\n}","x":585,"y":440,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code4","type":"Function","name":"set_OSC_x_pulseWidth - functions","comment":"\nvoid set_OSC_A_pulseWidth(byte value)\n{\n    if (value > 100) value = 100;\n    oscApulsewidth = value;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscA.pulseWidth(value*DIV100);\n    }\n}\n\nvoid set_OSC_B_pulseWidth(byte value)\n{\n    if (value > 100) value = 100;\n    oscBpulsewidth = value;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscB.pulseWidth(value*DIV100);\n    }\n}\n\nvoid set_OSC_C_pulseWidth(byte value)\n{\n    if (value > 100) value = 100;\n    oscCpulsewidth = value;\n    for (int i = 0; i < VOICE_COUNT; i++)\n    {\n        voices[i].oscC.pulseWidth(value*DIV100);\n    }\n}","x":590,"y":475,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code5","type":"Function","name":"set_OSC_x_phase - functions","comment":"\r\nvoid set_OSC_A_phase(byte value)\r\n{\r\n    if (value > 120) value = 120;\r\n    oscAphase = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscA.phase(value*DIV360BY120);\r\n    }\r\n}\r\n\r\nvoid set_OSC_B_phase(byte value)\r\n{\r\n    if (value > 120) value = 120;\r\n    oscBphase = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscB.phase(value*DIV360BY120);\r\n    }\r\n}\r\n\r\nvoid set_OSC_C_phase(byte value)\r\n{\r\n    if (value > 120) value = 120;\r\n    oscCphase = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscC.phase(value*DIV360BY120);\r\n    }\r\n}","x":575,"y":510,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code7","type":"Function","name":"set_envelope - functions","comment":"\r\nvoid set_envelope_delay(byte value)\r\n{\r\n    if (value > 127) value = 127;\r\n    envDelay = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.delay((float)value*(float)10);\r\n    }\r\n}\r\n\r\nvoid set_envelope_attack(byte value)\r\n{\r\n    if (value > 127) value = 127;\r\n    envAttack = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.attack((float)value*(float)10);\r\n    }\r\n}\r\n\r\nvoid set_envelope_hold(byte value)\r\n{\r\n    if (value > 127) value = 127;\r\n    envHold = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.hold((float)value*(float)10);\r\n    }\r\n}\r\n\r\nvoid set_envelope_decay(byte value)\r\n{\r\n    if (value > 127) value = 127;\r\n    envDecay = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.decay((float)value*(float)10);\r\n    }\r\n}\r\n\r\nvoid set_envelope_sustain(byte value)\r\n{\r\n    if (value > 100) value = 100;\r\n    envSustain = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.sustain(value*DIV100);\r\n    }\r\n}\r\n\r\nvoid set_envelope_release(byte value)\r\n{\r\n    if (value > 127) value = 127;\r\n    envRelease = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].env.release((float)value*(float)10);\r\n    }\r\n}","x":555,"y":580,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code8","type":"Function","name":"set_OSC_x_freqMult - functions","comment":"\r\nvoid set_OSC_A_freqMult(byte value)\r\n{\r\n    if (value > 127) value = 64;\r\n    oscApitchMult = value; // local storage for LOAD/SAVE/sendAllSettings()\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscApitchMult = value;\r\n    }\r\n}\r\n\r\nvoid set_OSC_B_freqMult(byte value)\r\n{\r\n    if (value > 127) value = 64;\r\n    oscBpitchMult = value; // local storage for LOAD/SAVE/sendAllSettings()\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscBpitchMult = value;\r\n    }\r\n}\r\n\r\nvoid set_OSC_C_freqMult(byte value)\r\n{\r\n    if (value > 127) value = 64;\r\n    oscCpitchMult = value; // local storage for LOAD/SAVE/sendAllSettings()\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].oscCpitchMult = value;\r\n    }\r\n}","x":580,"y":615,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code1","type":"Function","name":"settings send/Load/Save","comment":"void sendAllSettings()\r\n{\r\n    usbMIDI.sendControlChange(0, currentWTinstrument, 0x00);\r\n    usbMIDI.sendControlChange(20, oscAwaveform, 0x00);\r\n    usbMIDI.sendControlChange(21, oscBwaveform, 0x00);\r\n    usbMIDI.sendControlChange(22, oscCwaveform, 0x00);\r\n    usbMIDI.sendControlChange(23, oscApulsewidth, 0x00);\r\n    usbMIDI.sendControlChange(24, oscBpulsewidth, 0x00);\r\n    usbMIDI.sendControlChange(25, oscCpulsewidth, 0x00);\r\n    usbMIDI.sendControlChange(26, oscAphase, 0x00);\r\n    usbMIDI.sendControlChange(27, oscBphase, 0x00);\r\n    usbMIDI.sendControlChange(28, oscCphase, 0x00);\r\n    usbMIDI.sendControlChange(29, oscAamp, 0x00);\r\n    usbMIDI.sendControlChange(30, oscBamp, 0x00);\r\n    usbMIDI.sendControlChange(31, oscCamp, 0x00);\r\n    usbMIDI.sendControlChange(32, oscDamp, 0x00);\r\n    usbMIDI.sendControlChange(33, mixVoices_gains, 0x00);\r\n    usbMIDI.sendControlChange(100, envDelay, 0x00);\r\n    usbMIDI.sendControlChange(101, envAttack, 0x00);\r\n    usbMIDI.sendControlChange(102, envHold, 0x00);\r\n    usbMIDI.sendControlChange(103, envDecay, 0x00);\r\n    usbMIDI.sendControlChange(104, envSustain, 0x00);\r\n    usbMIDI.sendControlChange(105, envRelease, 0x00);\r\n        \r\n    usbMIDI.sendControlChange(108, oscApitchMult, 0x00);\r\n    usbMIDI.sendControlChange(109, oscBpitchMult, 0x00);\r\n    usbMIDI.sendControlChange(110, oscCpitchMult, 0x00);\r\n}\r\n\r\nvoid EEPROM_SaveSettings()\r\n{\r\n    EEPROM.write(20, oscAwaveform);\r\n    EEPROM.write(21, oscBwaveform);\r\n    EEPROM.write(22, oscCwaveform);\r\n\r\n    EEPROM.write(23, oscApulsewidth);\r\n    EEPROM.write(24, oscBpulsewidth);\r\n    EEPROM.write(25, oscCpulsewidth);\r\n\r\n    EEPROM.write(26, oscAphase);\r\n    EEPROM.write(27, oscBphase);\r\n    EEPROM.write(28, oscCphase);\r\n\r\n    EEPROM.write(29, oscAamp);\r\n    EEPROM.write(30, oscBamp);\r\n    EEPROM.write(31, oscCamp);\r\n    EEPROM.write(32, oscDamp);\r\n\r\n    EEPROM.write(33, mixVoices_gains);\r\n\r\n    EEPROM.write(100, envDelay);\r\n    EEPROM.write(101, envAttack);\r\n    EEPROM.write(102, envHold);\r\n    EEPROM.write(103, envDecay);\r\n    EEPROM.write(104, envSustain);\r\n    EEPROM.write(105, envRelease);\r\n        \r\n    EEPROM.write(108, oscApitchMult);\r\n    EEPROM.write(109, oscBpitchMult);\r\n    EEPROM.write(110, oscCpitchMult);\r\n}\r\nvoid EEPROM_ReadSettings()\r\n{\r\n    set_OSC_A_waveform(EEPROM.read(20));\r\n    set_OSC_B_waveform(EEPROM.read(21));\r\n    set_OSC_C_waveform(EEPROM.read(22));\r\n\r\n    set_OSC_A_pulseWidth(EEPROM.read(23));\r\n    set_OSC_B_pulseWidth(EEPROM.read(24));\r\n    set_OSC_C_pulseWidth(EEPROM.read(25));\r\n\r\n    set_OSC_A_phase(EEPROM.read(26));\r\n    set_OSC_B_phase(EEPROM.read(27));\r\n    set_OSC_C_phase(EEPROM.read(28));\r\n    \r\n    set_OSC_A_amplitude(EEPROM.read(29));\r\n    set_OSC_B_amplitude(EEPROM.read(30));\r\n    set_OSC_C_amplitude(EEPROM.read(31));\r\n\r\n    set_mixVoices_gains(EEPROM.read(33));\r\n        \r\n    set_envelope_delay(EEPROM.read(100));\r\n    set_envelope_attack(EEPROM.read(101));\r\n    set_envelope_hold(EEPROM.read(102));\r\n    set_envelope_decay(EEPROM.read(103));\r\n    set_envelope_sustain(EEPROM.read(104));\r\n    set_envelope_release(EEPROM.read(105));\r\n        \r\n    set_OSC_A_freqMult(EEPROM.read(108));\r\n    set_OSC_A_freqMult(EEPROM.read(109));\r\n    set_OSC_A_freqMult(EEPROM.read(110));\r\n}","x":565,"y":670,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"Synth_code6","type":"Function","name":"set_OSC_x_amplitude (voice-mixer) - functions","comment":"\r\nvoid set_OSC_A_amplitude(byte value)\r\n{\r\n    if (value > 100) value = 100;\r\n    oscAamp = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].mix.gain(0,value*DIV100);\r\n    }\r\n}\r\n\r\nvoid set_OSC_B_amplitude(byte value)\r\n{\r\n    if (value > 100) value = 100;\r\n    oscBamp = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].mix.gain(1, value*DIV100);\r\n    }\r\n}\r\n\r\nvoid set_OSC_C_amplitude(byte value)\r\n{\r\n    if (value > 100) value = 100;\r\n    oscCamp = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].mix.gain(2, value*DIV100);\r\n    }\r\n}\r\n\r\n// this is the wavetable\r\nvoid set_OSC_D_amplitude(byte value)\r\n{\r\n    if (value > 100) value = 100;\r\n    oscDamp = value;\r\n    for (int i = 0; i < VOICE_COUNT; i++)\r\n    {\r\n        voices[i].mix.gain(3, value*DIV100);\r\n    }\r\n}","x":630,"y":545,"z":"Main","bgColor":"#DDFFBB","wires":[]},{"id":"SynthMain_pt8211_2_1","type":"AudioOutputPT8211_2","name":"pt8211_2_1","comment":"","x":755,"y":150,"z":"Main","bgColor":"#E6E0F8","wires":[]},{"id":"Synth_usb1","type":"AudioOutputUSB","name":"usb2","comment":"","x":740,"y":195,"z":"Main","bgColor":"#E6E0F8","wires":[]},{"type":"tab","id":"5e244a75.659154","label":"Main","inputs":0,"outputs":0,"export":true,"nodes":[]},{"id":"SynthController_SynthMain1","type":"Synth","name":"synth","x":170,"y":45,"z":"5e244a75.659154","bgColor":"#CCFFCC","wires":[]},{"id":"SynthController_codeFile1","type":"CodeFile","name":"main.cpp","comment":"// Teensy-Synth Part 9\r\n// 5-PIN MIDI INPUT\r\n// By Notes and Volts\r\n// www.notesandvolts.com\r\n#include <Arduino.h>\r\n#include <Audio.h>\r\n#include <Wire.h>\r\n#include <SPI.h>\r\n#include <SD.h>\r\n#include <SerialFlash.h>\r\n#include <MIDI.h>\r\n\r\n\r\nconst int ledPin = 13;\r\nint ledState = LOW;             // ledState used to set the LED\r\nunsigned long previousMillis = 0;        // will store last time LED was updated\r\nunsigned long currentMillis = 0;\r\nunsigned long currentInterval = 0;\r\nunsigned long ledBlinkOnInterval = 100;\r\nunsigned long ledBlinkOffInterval = 2000;\r\n\r\n#define btnInEnablePin 9\r\n#define btnSustainPin 23\r\n#define btnSostenutoPin 22\r\n#define btnSoftPedalPin 21\r\nuint8_t btnSustain = 0;\r\nuint8_t btnSostenuto = 0;\r\nuint8_t btnSoftPedal = 0;\r\nuint8_t btnSustainWasPressed = 0;\r\nuint8_t btnSostenutoWasPressed = 0;\r\nuint8_t btnSoftPedalWasPressed = 0;\r\n\r\n#define btnNextInstrumentPin 20\r\nuint8_t btnNextInstrument = 0;\r\nuint8_t btnNextInstrumentWasPressed = 0;\r\n\r\nvoid uartMidi_NoteOn(byte channel, byte note, byte velocity);\r\nvoid uartMidi_NoteOff(byte channel, byte note, byte velocity);\r\nvoid uartMidi_ControlChange(byte channel, byte control, byte value);\r\nvoid uartMidi_PitchBend(byte channel, int value);\r\n\r\nvoid usbMidi_NoteOn(byte channel, byte note, byte velocity);\r\nvoid usbMidi_NoteOff(byte channel, byte note, byte velocity);\r\nvoid usbMidi_ControlChange(byte channel, byte control, byte value);\r\nvoid usbMidi_PitchBend(byte channel, int value);\r\n\r\nvoid blinkLedTask(void);\r\nvoid btnInputProcessTask(void);\r\n\r\n#include \"Synth.h\"\r\n\r\nSynth synth;\r\n//#include \"generatedCode.h\"\r\n//OneClassMain ocMain;\r\n\r\n//AudioMixer<4> mix4;\r\n//AudioMixer<2> mix2;\r\n  \r\n#define KEYBOARD_NOTE_SHIFT_CORRECTION 21//-12\r\n\r\nMIDI_CREATE_INSTANCE(HardwareSerial, Serial1, MIDI);\r\n\r\nvoid setup()\r\n{\r\n  AudioMemory(96);\r\n\r\n  //mix4.gain(1/4);\r\n  //mix2.gain(1/2);\r\n  \r\n  MIDI.begin();\r\n  MIDI.setHandleNoteOn(uartMidi_NoteOn);\r\n  MIDI.setHandleNoteOff(uartMidi_NoteOff);\r\n  MIDI.setHandleControlChange(uartMidi_ControlChange);\r\n  MIDI.setHandlePitchBend(uartMidi_PitchBend);\r\n\r\n  usbMIDI.setHandleNoteOn(usbMidi_NoteOn);\r\n  usbMIDI.setHandleNoteOff(usbMidi_NoteOff);\r\n  usbMIDI.setHandleControlChange(usbMidi_ControlChange);\r\n  usbMIDI.setHandlePitchChange(usbMidi_PitchBend);\r\n\r\n  synth.begin();\r\n  //ocMain.begin();\r\n\r\n  pinMode(btnSustainPin, INPUT);\r\n  pinMode(btnSostenutoPin, INPUT);\r\n  pinMode(btnSoftPedalPin, INPUT);\r\n  pinMode(btnNextInstrumentPin, INPUT);\r\n\r\n  pinMode(btnInEnablePin, OUTPUT);\r\n  digitalWrite(btnInEnablePin, LOW);\r\n\r\n  pinMode(ledPin, OUTPUT);\r\n  digitalWrite(ledPin, LOW);\r\n\r\n  btnSustainWasPressed = 0;\r\n  btnSoftPedalWasPressed = 0;\r\n  btnSostenutoWasPressed = 0;\r\n  btnNextInstrumentWasPressed = 0;\r\n  \r\n}\r\n\r\nvoid loop()\r\n{\r\n    usbMIDI.read();\r\n    MIDI.read();\r\n\r\n    btnInputProcessTask();\r\n    \r\n    blinkLedTask();\r\n}\r\n\r\nvoid uartMidi_NoteOn(byte channel, byte note, byte velocity) {\r\n    note += KEYBOARD_NOTE_SHIFT_CORRECTION;\r\n    velocity = 127 - velocity;\r\n    synth.noteOn(note, velocity);\r\n    usbMIDI.sendNoteOn(note, velocity, channel, 0);\r\n}\r\n\r\nvoid uartMidi_NoteOff(byte channel, byte note, byte velocity) {\r\n    note += KEYBOARD_NOTE_SHIFT_CORRECTION;\r\n    velocity = 127 - velocity;\r\n    synth.noteOff(note);\r\n    usbMIDI.sendNoteOff(note, velocity, channel, 0);\r\n}\r\n\r\nvoid uartMidi_ControlChange(byte channel, byte control, byte value) {\r\n    usbMIDI.sendControlChange(control, value, channel, 0x00);\r\n}\r\n\r\nvoid uartMidi_PitchBend(byte channel, int value) {\r\n    usbMIDI.sendPitchBend(value, channel, 0x00);\r\n}\r\n\r\nvoid usbMidi_NoteOn(byte channel, byte note, byte velocity) {\r\n    synth.noteOn(note, velocity);\r\n}\r\n\r\nvoid usbMidi_NoteOff(byte channel, byte note, byte velocity) {\r\n    synth.noteOff(note);    \r\n}\r\n\r\nvoid usbMidi_PitchBend(byte channel, int value) {\r\n  \r\n}\r\n\r\nvoid usbMidi_ControlChange(byte channel, byte control, byte value) {\r\n    switch (control) { // cases 20-31,102-119 is undefined in midi spec\r\n        case 64:\r\n          if (value == 0)\r\n            synth.deactivateSustain();\r\n          else if (value == 127)\r\n            synth.activateSustain();\r\n          break;\r\n        case 0:\r\n          synth.set_InstrumentByIndex(value);\r\n          break;\r\n        case 20: // OSC A waveform select\r\n          synth.set_OSC_A_waveform(value);\r\n          break;\r\n        case 21: // OSC B waveform select\r\n          synth.set_OSC_B_waveform(value);\r\n          break;\r\n        case 22: // OSC C waveform select\r\n          synth.set_OSC_C_waveform(value);\r\n          break;\r\n\r\n        case 23:\r\n          synth.set_OSC_A_pulseWidth(value);\r\n          break;\r\n        case 24:\r\n          synth.set_OSC_B_pulseWidth(value);\r\n          break;\r\n        case 25:\r\n          synth.set_OSC_C_pulseWidth(value);\r\n          break;\r\n\r\n        case 26:\r\n          synth.set_OSC_A_phase(value);\r\n          break;\r\n        case 27:\r\n          synth.set_OSC_B_phase(value);\r\n          break;\r\n        case 28:\r\n          synth.set_OSC_C_phase(value);\r\n          break;\r\n\r\n        case 29:\r\n          synth.set_OSC_A_amplitude(value);\r\n          break;\r\n        case 30:\r\n          synth.set_OSC_B_amplitude(value);\r\n          break;\r\n        case 31:\r\n          synth.set_OSC_C_amplitude(value);\r\n          break;\r\n        case 32: //(\"LSB for Control 0 (Bank Select)\" @ midi spec.)\r\n          synth.set_OSC_D_amplitude(value);\r\n          break;\r\n\r\n        case 33: \r\n          synth.set_mixVoices_gains(value);\r\n          break;\r\n        \r\n        case 100:\r\n          synth.set_envelope_delay(value);\r\n          break;\r\n        case 101:\r\n          synth.set_envelope_attack(value);\r\n          break;\r\n        case 102:\r\n          synth.set_envelope_hold(value);\r\n          break;\r\n        case 103:\r\n          synth.set_envelope_decay(value);\r\n          break;\r\n        case 104:\r\n          synth.set_envelope_sustain(value);\r\n          break;\r\n        case 105:\r\n          synth.set_envelope_release(value);\r\n          break;\r\n                 \r\n        case 108:\r\n          synth.set_OSC_A_freqMult(value);\r\n          break;\r\n        case 109:\r\n          synth.set_OSC_B_freqMult(value);\r\n          break;\r\n        case 110:\r\n          synth.set_OSC_C_freqMult(value);\r\n          break;\r\n\r\n        case 115: // set wavetable as primary (Piano mode)\r\n          synth.SetWaveTable_As_Primary();\r\n          break;\r\n        case 116:\r\n          synth.SetWaveForm_As_Primary();\r\n          break;\r\n          \r\n        case 117: // EEPROM read settings\r\n          synth.EEPROM_ReadSettings();\r\n          break;\r\n        case 118: // EEPROM save settings\r\n          synth.EEPROM_SaveSettings();\r\n          break;\r\n\r\n        case 119: // get all values\r\n          synth.sendAllSettings();\r\n        break;\r\n    }\r\n}\r\n\r\nvoid btnInputProcessTask(void)\r\n{\r\n  btnSustain = digitalRead(btnSustainPin);\r\n  btnSostenuto = digitalRead(btnSostenutoPin);\r\n  btnSoftPedal = digitalRead(btnSoftPedalPin);\r\n  btnNextInstrument = digitalRead(btnNextInstrumentPin);\r\n\r\n    // Sustain pedal\r\n    if ((btnSustain == LOW) && (btnSustainWasPressed == 0))\r\n    {\r\n        btnSustainWasPressed = 1;\r\n        usbMIDI.sendControlChange(0x40, 0x7F, 0x00);\r\n        synth.activateSustain();\r\n\r\n        uint16_t memory_used = AudioMemoryUsageMax();\r\n        uint16_t cpu_used = AudioProcessorUsageMax();\r\n        uint8_t data[11];\r\n        data[0] = 0x30 + memory_used/10000;\r\n        data[1] = 0x30 + memory_used%10000/1000;\r\n        data[2] = 0x30 + memory_used%10000%1000/100;\r\n        data[3] = 0x30 + memory_used%10000%1000%100/10;\r\n        data[4] = 0x30 + memory_used%10000%1000%100%10;\r\n        data[5] = ':';\r\n        data[6] = 0x30 + cpu_used/10000;\r\n        data[7] = 0x30 + cpu_used%10000/1000;\r\n        data[8] = 0x30 + cpu_used%10000%1000/100;\r\n        data[9] = 0x30 + cpu_used%10000%1000%100/10;\r\n        data[10] = 0x30 + cpu_used%10000%1000%100%10;\r\n        usbMIDI.sendSysEx(11, data);\r\n    }\r\n    else if ((btnSustain == HIGH) && (btnSustainWasPressed == 1))\r\n    {\r\n        btnSustainWasPressed = 0;\r\n        usbMIDI.sendControlChange(0x40, 0x00, 0x00);\r\n        synth.deactivateSustain();\r\n    }\r\n    // Sostenuto Pedal\r\n    if ((btnSostenuto == LOW) && (btnSostenutoWasPressed == 0))\r\n    {\r\n        btnSostenutoWasPressed = 1;\r\n        usbMIDI.sendControlChange(0x42, 0x7F, 0x00);\r\n    }\r\n    else if ((btnSostenuto == HIGH) && (btnSostenutoWasPressed == 1))\r\n    {\r\n        btnSostenutoWasPressed = 0;\r\n        usbMIDI.sendControlChange(0x42, 0x00, 0x00);\r\n    }\r\n    // Soft Pedal\r\n    if ((btnSoftPedal == LOW) && (btnSoftPedalWasPressed == 0))\r\n    {\r\n        btnSoftPedalWasPressed = 1;\r\n        usbMIDI.sendControlChange(0x43, 0x7F, 0x00);\r\n    }\r\n    else if ((btnSoftPedal == HIGH) && (btnSoftPedalWasPressed == 1))\r\n    {\r\n        btnSoftPedalWasPressed = 0;\r\n        usbMIDI.sendControlChange(0x43, 0x00, 0x00);\r\n    }\r\n    // Next Instrument button\r\n    if ((btnNextInstrument == LOW) && (btnNextInstrumentWasPressed == 0))\r\n    {\r\n        btnNextInstrumentWasPressed = 1;\r\n        if (synth.currentWTinstrument == (InstrumentCount - 1)) synth.currentWTinstrument = 0;\r\n        else synth.currentWTinstrument++;\r\n        synth.set_InstrumentByIndex(synth.currentWTinstrument);\r\n        usbMIDI.sendControlChange(0, synth.currentWTinstrument, 0x00);\r\n    }\r\n    else if ((btnNextInstrument == HIGH) && (btnNextInstrumentWasPressed == 1))\r\n    {\r\n        btnNextInstrumentWasPressed = 0;\r\n    }\r\n}\r\n\r\nvoid blinkLedTask(void)\r\n{\r\n    currentMillis = millis();\r\n    currentInterval = currentMillis - previousMillis;\r\n    \r\n    if (ledState == LOW)\r\n    {\r\n        if (currentInterval > ledBlinkOffInterval)\r\n        {\r\n            previousMillis = currentMillis;\r\n            ledState = HIGH;\r\n            digitalWrite(ledPin, HIGH);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (currentInterval > ledBlinkOnInterval)\r\n        {\r\n            previousMillis = currentMillis;\r\n            ledState = LOW;\r\n            digitalWrite(ledPin, LOW);\r\n        }\r\n    }\r\n}","x":175,"y":95,"z":"5e244a75.659154","bgColor":"#DDFFBB","wires":[]},{"type":"tab","id":"96f7195d.a7ede8","label":"MIDI_program_change","inputs":0,"outputs":0,"export":false,"nodes":[]},{"id":"MIDI program change_ListBox1","type":"UI_ListBox","name":"Piano","comment":"","w":184,"h":309,"textSize":14,"items":"1Acoustic Grand Piano\n2Bright Acoustic Piano\n3Electric Grand Piano\n4Honky-tonk Piano\n5Electric Piano 1\n6Electric Piano 2\n7Harpsichord\n8ClaviHonkytonk (3)","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":0,"selectedIndexOffset":"0","headerHeight":30,"itemBGcolor":"#FFF687","x":115,"y":175,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox2","type":"UI_ListBox","name":"Chromatic Percussion","comment":"","w":184,"h":311,"textSize":14,"items":"9Celesta\n10Glockenspiel\n11Music Box\n12Vibraphone\n13Marimba\n14Xylophone\n15Tubular Bells\n16Dulcimer","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":null,"selectedIndexOffset":"8","headerHeight":30,"itemBGcolor":"#FFF687","x":115,"y":495,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox3","type":"UI_ListBox","name":"Organ","comment":"","w":206,"h":311,"textSize":14,"items":"17Drawbar Organ\n18Percussive Organ\n19Rock Organ\n20Church Organ\n21Reed Organ\n22Accordion\n23Harmonica\n24Tango Accordion","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":3,"selectedIndexOffset":"16","headerHeight":30,"itemBGcolor":"#FFF687","x":320,"y":175,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox4","type":"UI_ListBox","name":"Guitar","comment":"","w":207,"h":311,"textSize":14,"items":"25Acoustic Guitar (nylon)\n26Acoustic Guitar (steel)\n27Electric Guitar (jazz)\n28Electric Guitar (clean)\n29Electric Guitar (muted)\n30Overdriven Guitar\n31Distortion Guitar\n32Guitar Harmonics","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":null,"selectedIndexOffset":"24","headerHeight":30,"itemBGcolor":"#FFF687","x":320,"y":495,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox5","type":"UI_ListBox","name":"Bass","comment":"","w":189,"h":311,"textSize":14,"items":"33Acoustic Bass\n34Electric Bass (finger)\n35Electric Bass (pick)\n36Fretless Bass\n37Slap Bass 1\n38Slap Bass 2\n39Synth Bass 1\n40Synth Bass 2","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":0,"selectedIndexOffset":"32","headerHeight":30,"itemBGcolor":"#FFF687","x":530,"y":175,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox6","type":"UI_ListBox","name":"Strings","comment":"","w":185,"h":311,"textSize":14,"items":"41Violin\n42Viola\n43Cello\n44Contrabass\n45Tremolo Strings\n46Pizzicato Strings\n47Orchestral Harp\n48Timpani","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":3,"selectedIndexOffset":"40","headerHeight":30,"itemBGcolor":"#FFF687","x":525,"y":500,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox7","type":"UI_ListBox","name":"Ensemble","comment":"","w":177,"h":311,"textSize":14,"items":"49String Ensemble 1\n50String Ensemble 2\n51SynthStrings 1\n52SynthStrings 2\n53Choir Aahs\n54Voice Oohs\n55Synth Voice\n56Orchestra Hit","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":0,"selectedIndexOffset":"48","headerHeight":30,"itemBGcolor":"#FFF687","x":725,"y":175,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox8","type":"UI_ListBox","name":"Brass","comment":"","w":178,"h":311,"textSize":14,"items":"57Trumpet\n58Trombone\n59Tuba\n60Muted Trumpet\n61French Horn\n62Brass Section\n63SynthBrass 1\n64SynthBrass 2","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":"0","selectedIndexOffset":"56","headerHeight":30,"itemBGcolor":"#FFF687","x":720,"y":500,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox9","type":"UI_ListBox","name":"ReedBass","comment":"","w":170,"h":311,"textSize":14,"items":"65Soprano Sax\n66Alto Sax\n67Tenor Sax\n68Baritone Sax\n69Oboe\n70English Horn\n71Bassoon\n72Clarinet","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":"0","selectedIndexOffset":"64","headerHeight":30,"itemBGcolor":"#FFF687","x":915,"y":175,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox10","type":"UI_ListBox","name":"Pipe","comment":"","w":177,"h":311,"textSize":14,"items":"73Piccolo\n74Flute\n75Recorder\n76Pan Flute\n77Blown Bottle\n78Shakuhachi\n79Whistle\n80Ocarina","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":1,"selectedIndexOffset":"72","headerHeight":30,"itemBGcolor":"#FFF687","x":910,"y":505,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox11","type":"UI_ListBox","name":"Synth Lead","comment":"","w":177,"h":311,"textSize":14,"items":"81Lead 1 (square)\n82Lead 2 (sawtooth)\n83Lead 3 (calliope)\n84Lead 4 (chiff)\n85Lead 5 (charang)\n86Lead 6 (voice)\n87Lead 7 (fifths)\n88Lead 8 (bass + lead)","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":6,"selectedIndexOffset":"80","headerHeight":30,"itemBGcolor":"#FFF687","x":1100,"y":180,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox12","type":"UI_ListBox","name":"Synth Pad","comment":"","w":177,"h":311,"textSize":14,"items":"89Pad 1 (new age)\n90Pad 2 (warm)\n91Pad 3 (polysynth)\n92Pad 4 (choir)\n93Pad 5 (bowed)\n94Pad 6 (metallic)\n95Pad 7 (halo)\n96Pad 8 (sweep)","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":"7","selectedIndexOffset":"88","headerHeight":30,"itemBGcolor":"#FFF687","x":1100,"y":505,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox13","type":"UI_ListBox","name":"Synth Effects","comment":"","w":177,"h":311,"textSize":14,"items":"97FX 1 (rain)\n98FX 2 (soundtrack)\n99FX 3 (crystal)\n100FX 4 (atmosphere)\n101FX 5 (brightness)\n102FX 6 (goblins)\n103FX 7 (echoes)\n104FX 8 (sci-fi)","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":7,"selectedIndexOffset":"96","headerHeight":30,"itemBGcolor":"#FFF687","x":1290,"y":180,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox14","type":"UI_ListBox","name":"Ethnic","comment":"","w":177,"h":311,"textSize":14,"items":"105Sitar\n106Banjo\n107Shamisen\n108Koto\n109Kalimba\n110Bag Pipe\n111Fiddle\n112Shanai","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":"4","selectedIndexOffset":"104","headerHeight":30,"itemBGcolor":"#FFF687","x":1290,"y":505,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox15","type":"UI_ListBox","name":"Percussive","comment":"","w":183,"h":311,"textSize":14,"items":"113Tinkle Bell\n114Agogo\n115Steel Drums\n116Woodblock\n117Taiko Drum\n118Melodic Tom\n119Synth Drum\n120Reverse Cymbal","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":1,"selectedIndexOffset":"112","headerHeight":30,"itemBGcolor":"#FFF687","x":1480,"y":180,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"id":"MIDI program change_ListBox16","type":"UI_ListBox","name":"Sound Effects","comment":"","w":182,"h":311,"textSize":14,"items":"121Guitar Fret Noise\n122Breath Noise\n123Seashore\n124Bird Tweet\n125Telephone Ring\n126Helicopter\n127Applause\n128Gunshot","sendCommand":"\"midiSend(0xC0, \" + (parseInt(d.selectedIndex)+parseInt(d.selectedIndexOffset)) +\",0)\"","selectedIndex":0,"selectedIndexOffset":"120","headerHeight":30,"itemBGcolor":"#FFF687","x":1485,"y":505,"z":"96f7195d.a7ede8","bgColor":"#F6F8BC","wires":[]},{"type":"tab","id":"8e1705e8.8075f8","label":"equalizerDemo","inputs":0,"outputs":0,"export":false,"nodes":[]},{"id":"equalizerDemo_scriptBtn1","type":"UI_ScriptButton","name":"auto place sliders - script","comment":"var nsw = 10; // new slider width\nvar nsh = 500; // new slider height\nvar ssp = 00; // sliper spacing\nvar count = 100;\nvar nsmav = 100; // new slider max Value\nvar nsmiv = 0; // new slider min value\n\nvar colorMap = generateColorMap(); // provided by RED.view\n\nvar colorMapDeltaIndex = parseInt(colorMap.length/count);\nvar deltaValue = nsmav/count;\n//console.warn(colorMap);\n\n// note that all positions x and y \n// are based from the middle of the rects\n\n//RED.view.SliderNodeListTemp is used\n// to store the prev. added items (sliders)\n// so they can be removed before the script is run\n// again (to avoid \"duplicates\")\n// this list is NOT saved between instances of this \"program\"\n\nif (RED.view.SliderNodeListTemp == undefined)\n    RED.view.SliderNodeListTemp = [];\nelse // prev items exists\n{\n    // this clears previously added items\n    for (var i = 0; i < RED.view.SliderNodeListTemp.length; i++)\n    {\n        removeNode(RED.view.SliderNodeListTemp[i]);\n    }\n    RED.view.SliderNodeListTemp = [];\n}\nredraw(true);\n\nfor (var i = 0; i < count; i++)\n{\n    var newSlider = AddNewNode(i*(nsw+ssp) + (d.x-d.w/2 + nsw/2),(d.y+d.h/2+nsh/2), \"UI_Slider\");\n    newSlider.name = \"Hello World\";\n    newSlider.label = \"eval(d.val)\";\n    newSlider.orientation = \"v\";\n    newSlider.sendFormat = '\"midisend(0xB0,' +(100+i)+ ', \" + d.val + \");\"'\n    newSlider.h = nsh;\n    newSlider.w = nsw;\n    newSlider.maxValue = nsmav;\n    newSlider.minValue = nsmiv;\n    // this value set is just a cool demo\n    newSlider.val = parseInt(Math.sin(i*deltaValue*0.1)*25 + 50);\n    \n    newSlider.dirty = true;\n    newSlider.bgColor = colorMap[colorMapDeltaIndex*i];\n    \n    RED.view.SliderNodeListTemp.push(newSlider);\n    \n}\nredraw(true);\n\n","w":191,"h":30,"textSize":14,"x":200,"y":70,"z":"8e1705e8.8075f8","bgColor":"#DDFFBB","wires":[]}]